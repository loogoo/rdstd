/* soapH.h
   Generated by gSOAP 2.8.17r from rdms.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_short
#define SOAP_TYPE_short (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

#ifndef soap_write_short
#define soap_write_short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_short(soap, data),0) || soap_put_short(soap, data, "short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

#ifndef soap_read_short
#define soap_read_short(soap, data) ( soap_begin_recv(soap) || !soap_get_short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (18)
#endif

#define soap_default_xsd__int(soap, a) soap_default_int(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__int(soap, data),0) || soap_put_xsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (13)
#endif

#define soap_default_xsd__double(soap, a) soap_default_double(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__double(soap, data),0) || soap_put_xsd__double(soap, data, "xsd:double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data),0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__u16
#define SOAP_TYPE_xsd__u16 (10)
#endif

#define soap_default_xsd__u16(soap, a) soap_default_unsignedShort(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__u16(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_xsd__u16(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__u16(struct soap*, const unsigned short *, const char*, const char*);

#ifndef soap_write_xsd__u16
#define soap_write_xsd__u16(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__u16(soap, data),0) || soap_put_xsd__u16(soap, data, "xsd:u16", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_xsd__u16(struct soap*, unsigned short *, const char*, const char*);

#ifndef soap_read_xsd__u16
#define soap_read_xsd__u16(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__u16(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedShort
#define SOAP_TYPE_unsignedShort (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap*, unsigned short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

#ifndef soap_write_unsignedShort
#define soap_write_unsignedShort(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedShort(soap, data),0) || soap_put_unsignedShort(soap, data, "unsignedShort", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

#ifndef soap_read_unsignedShort
#define soap_read_unsignedShort(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__u32
#define SOAP_TYPE_xsd__u32 (11)
#endif

#define soap_default_xsd__u32(soap, a) soap_default_unsignedInt(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__u32(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_xsd__u32(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__u32(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_xsd__u32
#define soap_write_xsd__u32(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__u32(soap, data),0) || soap_put_xsd__u32(soap, data, "xsd:u32", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_xsd__u32(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_xsd__u32
#define soap_read_xsd__u32(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__u32(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__time
#define SOAP_TYPE_xsd__time (17)
#endif

#define soap_default_xsd__time(soap, a) soap_default_time(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_xsd__time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_xsd__time
#define soap_write_xsd__time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__time(soap, data),0) || soap_put_xsd__time(soap, data, "xsd:time", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_xsd__time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_xsd__time
#define soap_read_xsd__time(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data),0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__bool
#define SOAP_TYPE_xsd__bool (15)
#endif

#define soap_default_xsd__bool(soap, a) soap_default_bool(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_xsd__bool
#define soap_write_xsd__bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__bool(soap, data),0) || soap_put_xsd__bool(soap, data, "xsd:bool", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_xsd__bool
#define soap_read_xsd__bool(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_matrix
#define SOAP_TYPE_matrix (52)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_matrix(struct soap*, const char*, int, const matrix *, const char*);
SOAP_FMAC3 matrix * SOAP_FMAC4 soap_in_matrix(struct soap*, const char*, matrix *, const char*);

#ifndef soap_write_matrix
#define soap_write_matrix(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 matrix * SOAP_FMAC4 soap_get_matrix(struct soap*, matrix *, const char*, const char*);

#ifndef soap_read_matrix
#define soap_read_matrix(soap, data) ( soap_begin_recv(soap) || !soap_get_matrix(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 matrix * SOAP_FMAC2 soap_instantiate_matrix(struct soap*, int, const char*, const char*, size_t*);

inline matrix * soap_new_matrix(struct soap *soap, int n = -1) { return soap_instantiate_matrix(soap, n, NULL, NULL, NULL); }

inline matrix * soap_new_req_matrix(struct soap *soap) { matrix *_p = soap_instantiate_matrix(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline matrix * soap_new_set_matrix(struct soap *soap, vector *__ptr, int __size) { matrix *_p = soap_instantiate_matrix(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->matrix::__ptr = __ptr; _p->matrix::__size = __size; } return _p; }

inline void soap_delete_matrix(struct soap *soap, matrix *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_matrix(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_vector
#define SOAP_TYPE_vector (44)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_vector(struct soap*, const char*, int, const vector *, const char*);
SOAP_FMAC3 vector * SOAP_FMAC4 soap_in_vector(struct soap*, const char*, vector *, const char*);

#ifndef soap_write_vector
#define soap_write_vector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 vector * SOAP_FMAC4 soap_get_vector(struct soap*, vector *, const char*, const char*);

#ifndef soap_read_vector
#define soap_read_vector(soap, data) ( soap_begin_recv(soap) || !soap_get_vector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 vector * SOAP_FMAC2 soap_instantiate_vector(struct soap*, int, const char*, const char*, size_t*);

inline vector * soap_new_vector(struct soap *soap, int n = -1) { return soap_instantiate_vector(soap, n, NULL, NULL, NULL); }

inline vector * soap_new_req_vector(struct soap *soap) { vector *_p = soap_instantiate_vector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline vector * soap_new_set_vector(struct soap *soap, int *__ptr, int __size) { vector *_p = soap_instantiate_vector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->vector::__ptr = __ptr; _p->vector::__size = __size; } return _p; }

inline void soap_delete_vector(struct soap *soap, vector *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_vector(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ARR_WEB_DOIVAL
#define SOAP_TYPE_ARR_WEB_DOIVAL (35)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ARR_WEB_DOIVAL(struct soap*, const char*, int, const ARR_WEB_DOIVAL *, const char*);
SOAP_FMAC3 ARR_WEB_DOIVAL * SOAP_FMAC4 soap_in_ARR_WEB_DOIVAL(struct soap*, const char*, ARR_WEB_DOIVAL *, const char*);

#ifndef soap_write_ARR_WEB_DOIVAL
#define soap_write_ARR_WEB_DOIVAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ARR_WEB_DOIVAL * SOAP_FMAC4 soap_get_ARR_WEB_DOIVAL(struct soap*, ARR_WEB_DOIVAL *, const char*, const char*);

#ifndef soap_read_ARR_WEB_DOIVAL
#define soap_read_ARR_WEB_DOIVAL(soap, data) ( soap_begin_recv(soap) || !soap_get_ARR_WEB_DOIVAL(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ARR_WEB_DOIVAL * SOAP_FMAC2 soap_instantiate_ARR_WEB_DOIVAL(struct soap*, int, const char*, const char*, size_t*);

inline ARR_WEB_DOIVAL * soap_new_ARR_WEB_DOIVAL(struct soap *soap, int n = -1) { return soap_instantiate_ARR_WEB_DOIVAL(soap, n, NULL, NULL, NULL); }

inline ARR_WEB_DOIVAL * soap_new_req_ARR_WEB_DOIVAL(struct soap *soap) { ARR_WEB_DOIVAL *_p = soap_instantiate_ARR_WEB_DOIVAL(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ARR_WEB_DOIVAL * soap_new_set_ARR_WEB_DOIVAL(struct soap *soap, struct WEB_DOIVAL *__ptr, int __size) { ARR_WEB_DOIVAL *_p = soap_instantiate_ARR_WEB_DOIVAL(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ARR_WEB_DOIVAL::__ptr = __ptr; _p->ARR_WEB_DOIVAL::__size = __size; } return _p; }

inline void soap_delete_ARR_WEB_DOIVAL(struct soap *soap, ARR_WEB_DOIVAL *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ARR_WEB_DOIVAL(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ARR_WEB_DOI
#define SOAP_TYPE_ARR_WEB_DOI (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ARR_WEB_DOI(struct soap*, const char*, int, const ARR_WEB_DOI *, const char*);
SOAP_FMAC3 ARR_WEB_DOI * SOAP_FMAC4 soap_in_ARR_WEB_DOI(struct soap*, const char*, ARR_WEB_DOI *, const char*);

#ifndef soap_write_ARR_WEB_DOI
#define soap_write_ARR_WEB_DOI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ARR-WEB-DOI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ARR_WEB_DOI * SOAP_FMAC4 soap_get_ARR_WEB_DOI(struct soap*, ARR_WEB_DOI *, const char*, const char*);

#ifndef soap_read_ARR_WEB_DOI
#define soap_read_ARR_WEB_DOI(soap, data) ( soap_begin_recv(soap) || !soap_get_ARR_WEB_DOI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ARR_WEB_DOI * SOAP_FMAC2 soap_instantiate_ARR_WEB_DOI(struct soap*, int, const char*, const char*, size_t*);

inline ARR_WEB_DOI * soap_new_ARR_WEB_DOI(struct soap *soap, int n = -1) { return soap_instantiate_ARR_WEB_DOI(soap, n, NULL, NULL, NULL); }

inline ARR_WEB_DOI * soap_new_req_ARR_WEB_DOI(struct soap *soap, int __size, struct WEB_DOI *__ptr) { ARR_WEB_DOI *_p = soap_instantiate_ARR_WEB_DOI(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ARR_WEB_DOI::__size = __size; _p->ARR_WEB_DOI::__ptr = __ptr; } return _p; }

inline ARR_WEB_DOI * soap_new_set_ARR_WEB_DOI(struct soap *soap, int __size, struct WEB_DOI *__ptr) { ARR_WEB_DOI *_p = soap_instantiate_ARR_WEB_DOI(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ARR_WEB_DOI::__size = __size; _p->ARR_WEB_DOI::__ptr = __ptr; } return _p; }

inline void soap_delete_ARR_WEB_DOI(struct soap *soap, ARR_WEB_DOI *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ARR_WEB_DOI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__magic
#define SOAP_TYPE_ns__magic (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__magic(struct soap*, struct ns__magic *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__magic(struct soap*, const struct ns__magic *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__magic(struct soap*, const char*, int, const struct ns__magic *, const char*);
SOAP_FMAC3 struct ns__magic * SOAP_FMAC4 soap_in_ns__magic(struct soap*, const char*, struct ns__magic *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__magic(struct soap*, const struct ns__magic *, const char*, const char*);

#ifndef soap_write_ns__magic
#define soap_write_ns__magic(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__magic(soap, data),0) || soap_put_ns__magic(soap, data, "ns:magic", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__magic * SOAP_FMAC4 soap_get_ns__magic(struct soap*, struct ns__magic *, const char*, const char*);

#ifndef soap_read_ns__magic
#define soap_read_ns__magic(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__magic(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__magic * SOAP_FMAC2 soap_instantiate_ns__magic(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__magic * soap_new_ns__magic(struct soap *soap, int n = -1) { return soap_instantiate_ns__magic(soap, n, NULL, NULL, NULL); }

inline struct ns__magic * soap_new_req_ns__magic(struct soap *soap, int rank) { struct ns__magic *_p = soap_instantiate_ns__magic(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__magic(soap, _p); _p->rank = rank; } return _p; }

inline struct ns__magic * soap_new_set_ns__magic(struct soap *soap, int rank) { struct ns__magic *_p = soap_instantiate_ns__magic(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__magic(soap, _p); _p->rank = rank; } return _p; }

inline void soap_delete_ns__magic(struct soap *soap, struct ns__magic *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__magic(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__magicResponse
#define SOAP_TYPE_ns__magicResponse (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__magicResponse(struct soap*, struct ns__magicResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__magicResponse(struct soap*, const struct ns__magicResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__magicResponse(struct soap*, const char*, int, const struct ns__magicResponse *, const char*);
SOAP_FMAC3 struct ns__magicResponse * SOAP_FMAC4 soap_in_ns__magicResponse(struct soap*, const char*, struct ns__magicResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__magicResponse(struct soap*, const struct ns__magicResponse *, const char*, const char*);

#ifndef soap_write_ns__magicResponse
#define soap_write_ns__magicResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__magicResponse(soap, data),0) || soap_put_ns__magicResponse(soap, data, "ns:magicResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__magicResponse * SOAP_FMAC4 soap_get_ns__magicResponse(struct soap*, struct ns__magicResponse *, const char*, const char*);

#ifndef soap_read_ns__magicResponse
#define soap_read_ns__magicResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__magicResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__magicResponse * SOAP_FMAC2 soap_instantiate_ns__magicResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__magicResponse * soap_new_ns__magicResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__magicResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__magicResponse * soap_new_req_ns__magicResponse(struct soap *soap) { struct ns__magicResponse *_p = soap_instantiate_ns__magicResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__magicResponse(soap, _p); } return _p; }

inline struct ns__magicResponse * soap_new_set_ns__magicResponse(struct soap *soap, matrix *result) { struct ns__magicResponse *_p = soap_instantiate_ns__magicResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__magicResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__magicResponse(struct soap *soap, struct ns__magicResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__magicResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__multi
#define SOAP_TYPE_ns__multi (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__multi(struct soap*, struct ns__multi *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__multi(struct soap*, const struct ns__multi *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__multi(struct soap*, const char*, int, const struct ns__multi *, const char*);
SOAP_FMAC3 struct ns__multi * SOAP_FMAC4 soap_in_ns__multi(struct soap*, const char*, struct ns__multi *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__multi(struct soap*, const struct ns__multi *, const char*, const char*);

#ifndef soap_write_ns__multi
#define soap_write_ns__multi(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__multi(soap, data),0) || soap_put_ns__multi(soap, data, "ns:multi", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__multi * SOAP_FMAC4 soap_get_ns__multi(struct soap*, struct ns__multi *, const char*, const char*);

#ifndef soap_read_ns__multi
#define soap_read_ns__multi(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__multi(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__multi * SOAP_FMAC2 soap_instantiate_ns__multi(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__multi * soap_new_ns__multi(struct soap *soap, int n = -1) { return soap_instantiate_ns__multi(soap, n, NULL, NULL, NULL); }

inline struct ns__multi * soap_new_req_ns__multi(struct soap *soap, int a, int b) { struct ns__multi *_p = soap_instantiate_ns__multi(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__multi(soap, _p); _p->a = a; _p->b = b; } return _p; }

inline struct ns__multi * soap_new_set_ns__multi(struct soap *soap, int a, int b) { struct ns__multi *_p = soap_instantiate_ns__multi(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__multi(soap, _p); _p->a = a; _p->b = b; } return _p; }

inline void soap_delete_ns__multi(struct soap *soap, struct ns__multi *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__multi(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__multiResponse
#define SOAP_TYPE_ns__multiResponse (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__multiResponse(struct soap*, struct ns__multiResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__multiResponse(struct soap*, const struct ns__multiResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__multiResponse(struct soap*, const char*, int, const struct ns__multiResponse *, const char*);
SOAP_FMAC3 struct ns__multiResponse * SOAP_FMAC4 soap_in_ns__multiResponse(struct soap*, const char*, struct ns__multiResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__multiResponse(struct soap*, const struct ns__multiResponse *, const char*, const char*);

#ifndef soap_write_ns__multiResponse
#define soap_write_ns__multiResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__multiResponse(soap, data),0) || soap_put_ns__multiResponse(soap, data, "ns:multiResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__multiResponse * SOAP_FMAC4 soap_get_ns__multiResponse(struct soap*, struct ns__multiResponse *, const char*, const char*);

#ifndef soap_read_ns__multiResponse
#define soap_read_ns__multiResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__multiResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__multiResponse * SOAP_FMAC2 soap_instantiate_ns__multiResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__multiResponse * soap_new_ns__multiResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__multiResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__multiResponse * soap_new_req_ns__multiResponse(struct soap *soap) { struct ns__multiResponse *_p = soap_instantiate_ns__multiResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__multiResponse(soap, _p); } return _p; }

inline struct ns__multiResponse * soap_new_set_ns__multiResponse(struct soap *soap, int *c) { struct ns__multiResponse *_p = soap_instantiate_ns__multiResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__multiResponse(soap, _p); _p->c = c; } return _p; }

inline void soap_delete_ns__multiResponse(struct soap *soap, struct ns__multiResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__multiResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__GetDataN
#define SOAP_TYPE_ns__GetDataN (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDataN(struct soap*, struct ns__GetDataN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDataN(struct soap*, const struct ns__GetDataN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDataN(struct soap*, const char*, int, const struct ns__GetDataN *, const char*);
SOAP_FMAC3 struct ns__GetDataN * SOAP_FMAC4 soap_in_ns__GetDataN(struct soap*, const char*, struct ns__GetDataN *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDataN(struct soap*, const struct ns__GetDataN *, const char*, const char*);

#ifndef soap_write_ns__GetDataN
#define soap_write_ns__GetDataN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetDataN(soap, data),0) || soap_put_ns__GetDataN(soap, data, "ns:GetDataN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetDataN * SOAP_FMAC4 soap_get_ns__GetDataN(struct soap*, struct ns__GetDataN *, const char*, const char*);

#ifndef soap_read_ns__GetDataN
#define soap_read_ns__GetDataN(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__GetDataN(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__GetDataN * SOAP_FMAC2 soap_instantiate_ns__GetDataN(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDataN * soap_new_ns__GetDataN(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetDataN(soap, n, NULL, NULL, NULL); }

inline struct ns__GetDataN * soap_new_req_ns__GetDataN(struct soap *soap) { struct ns__GetDataN *_p = soap_instantiate_ns__GetDataN(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetDataN(soap, _p); } return _p; }

inline struct ns__GetDataN * soap_new_set_ns__GetDataN(struct soap *soap, ARR_WEB_DOI *doi) { struct ns__GetDataN *_p = soap_instantiate_ns__GetDataN(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetDataN(soap, _p); _p->doi = doi; } return _p; }

inline void soap_delete_ns__GetDataN(struct soap *soap, struct ns__GetDataN *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetDataN(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__GetDataNResponse
#define SOAP_TYPE_ns__GetDataNResponse (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDataNResponse(struct soap*, struct ns__GetDataNResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDataNResponse(struct soap*, const struct ns__GetDataNResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDataNResponse(struct soap*, const char*, int, const struct ns__GetDataNResponse *, const char*);
SOAP_FMAC3 struct ns__GetDataNResponse * SOAP_FMAC4 soap_in_ns__GetDataNResponse(struct soap*, const char*, struct ns__GetDataNResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDataNResponse(struct soap*, const struct ns__GetDataNResponse *, const char*, const char*);

#ifndef soap_write_ns__GetDataNResponse
#define soap_write_ns__GetDataNResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetDataNResponse(soap, data),0) || soap_put_ns__GetDataNResponse(soap, data, "ns:GetDataNResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetDataNResponse * SOAP_FMAC4 soap_get_ns__GetDataNResponse(struct soap*, struct ns__GetDataNResponse *, const char*, const char*);

#ifndef soap_read_ns__GetDataNResponse
#define soap_read_ns__GetDataNResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__GetDataNResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__GetDataNResponse * SOAP_FMAC2 soap_instantiate_ns__GetDataNResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDataNResponse * soap_new_ns__GetDataNResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetDataNResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__GetDataNResponse * soap_new_req_ns__GetDataNResponse(struct soap *soap) { struct ns__GetDataNResponse *_p = soap_instantiate_ns__GetDataNResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetDataNResponse(soap, _p); } return _p; }

inline struct ns__GetDataNResponse * soap_new_set_ns__GetDataNResponse(struct soap *soap, ARR_WEB_DOIVAL *pVal) { struct ns__GetDataNResponse *_p = soap_instantiate_ns__GetDataNResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetDataNResponse(soap, _p); _p->pVal = pVal; } return _p; }

inline void soap_delete_ns__GetDataNResponse(struct soap *soap, struct ns__GetDataNResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetDataNResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__GetData
#define SOAP_TYPE_ns__GetData (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetData(struct soap*, struct ns__GetData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetData(struct soap*, const struct ns__GetData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetData(struct soap*, const char*, int, const struct ns__GetData *, const char*);
SOAP_FMAC3 struct ns__GetData * SOAP_FMAC4 soap_in_ns__GetData(struct soap*, const char*, struct ns__GetData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetData(struct soap*, const struct ns__GetData *, const char*, const char*);

#ifndef soap_write_ns__GetData
#define soap_write_ns__GetData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetData(soap, data),0) || soap_put_ns__GetData(soap, data, "ns:GetData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetData * SOAP_FMAC4 soap_get_ns__GetData(struct soap*, struct ns__GetData *, const char*, const char*);

#ifndef soap_read_ns__GetData
#define soap_read_ns__GetData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__GetData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__GetData * SOAP_FMAC2 soap_instantiate_ns__GetData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetData * soap_new_ns__GetData(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetData(soap, n, NULL, NULL, NULL); }

inline struct ns__GetData * soap_new_req_ns__GetData(struct soap *soap, struct WEB_DOI& doi) { struct ns__GetData *_p = soap_instantiate_ns__GetData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetData(soap, _p); _p->doi = doi; } return _p; }

inline struct ns__GetData * soap_new_set_ns__GetData(struct soap *soap, struct WEB_DOI& doi) { struct ns__GetData *_p = soap_instantiate_ns__GetData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetData(soap, _p); _p->doi = doi; } return _p; }

inline void soap_delete_ns__GetData(struct soap *soap, struct ns__GetData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__GetDataResponse
#define SOAP_TYPE_ns__GetDataResponse (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDataResponse(struct soap*, struct ns__GetDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDataResponse(struct soap*, const struct ns__GetDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDataResponse(struct soap*, const char*, int, const struct ns__GetDataResponse *, const char*);
SOAP_FMAC3 struct ns__GetDataResponse * SOAP_FMAC4 soap_in_ns__GetDataResponse(struct soap*, const char*, struct ns__GetDataResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDataResponse(struct soap*, const struct ns__GetDataResponse *, const char*, const char*);

#ifndef soap_write_ns__GetDataResponse
#define soap_write_ns__GetDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetDataResponse(soap, data),0) || soap_put_ns__GetDataResponse(soap, data, "ns:GetDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetDataResponse * SOAP_FMAC4 soap_get_ns__GetDataResponse(struct soap*, struct ns__GetDataResponse *, const char*, const char*);

#ifndef soap_read_ns__GetDataResponse
#define soap_read_ns__GetDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__GetDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__GetDataResponse * SOAP_FMAC2 soap_instantiate_ns__GetDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDataResponse * soap_new_ns__GetDataResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetDataResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__GetDataResponse * soap_new_req_ns__GetDataResponse(struct soap *soap) { struct ns__GetDataResponse *_p = soap_instantiate_ns__GetDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetDataResponse(soap, _p); } return _p; }

inline struct ns__GetDataResponse * soap_new_set_ns__GetDataResponse(struct soap *soap, struct WEB_DOIVAL *pVal) { struct ns__GetDataResponse *_p = soap_instantiate_ns__GetDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetDataResponse(soap, _p); _p->pVal = pVal; } return _p; }

inline void soap_delete_ns__GetDataResponse(struct soap *soap, struct ns__GetDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_WEB_DOIVAL
#define SOAP_TYPE_WEB_DOIVAL (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_WEB_DOIVAL(struct soap*, struct WEB_DOIVAL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_WEB_DOIVAL(struct soap*, const struct WEB_DOIVAL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_WEB_DOIVAL(struct soap*, const char*, int, const struct WEB_DOIVAL *, const char*);
SOAP_FMAC3 struct WEB_DOIVAL * SOAP_FMAC4 soap_in_WEB_DOIVAL(struct soap*, const char*, struct WEB_DOIVAL *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_WEB_DOIVAL(struct soap*, const struct WEB_DOIVAL *, const char*, const char*);

#ifndef soap_write_WEB_DOIVAL
#define soap_write_WEB_DOIVAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_WEB_DOIVAL(soap, data),0) || soap_put_WEB_DOIVAL(soap, data, "WEB-DOIVAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct WEB_DOIVAL * SOAP_FMAC4 soap_get_WEB_DOIVAL(struct soap*, struct WEB_DOIVAL *, const char*, const char*);

#ifndef soap_read_WEB_DOIVAL
#define soap_read_WEB_DOIVAL(soap, data) ( soap_begin_recv(soap) || !soap_get_WEB_DOIVAL(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct WEB_DOIVAL * SOAP_FMAC2 soap_instantiate_WEB_DOIVAL(struct soap*, int, const char*, const char*, size_t*);

inline struct WEB_DOIVAL * soap_new_WEB_DOIVAL(struct soap *soap, int n = -1) { return soap_instantiate_WEB_DOIVAL(soap, n, NULL, NULL, NULL); }

inline struct WEB_DOIVAL * soap_new_req_WEB_DOIVAL(struct soap *soap, struct WEB_DOI& doi, unsigned short type, unsigned int val, double dVal, bool bValid, time_t rvTime) { struct WEB_DOIVAL *_p = soap_instantiate_WEB_DOIVAL(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WEB_DOIVAL(soap, _p); _p->doi = doi; _p->type = type; _p->val = val; _p->dVal = dVal; _p->bValid = bValid; _p->rvTime = rvTime; } return _p; }

inline struct WEB_DOIVAL * soap_new_set_WEB_DOIVAL(struct soap *soap, struct WEB_DOI& doi, unsigned short type, unsigned int val, double dVal, bool bValid, time_t rvTime) { struct WEB_DOIVAL *_p = soap_instantiate_WEB_DOIVAL(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WEB_DOIVAL(soap, _p); _p->doi = doi; _p->type = type; _p->val = val; _p->dVal = dVal; _p->bValid = bValid; _p->rvTime = rvTime; } return _p; }

inline void soap_delete_WEB_DOIVAL(struct soap *soap, struct WEB_DOIVAL *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_WEB_DOIVAL(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_WEB_DOI
#define SOAP_TYPE_WEB_DOI (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_WEB_DOI(struct soap*, struct WEB_DOI *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_WEB_DOI(struct soap*, const struct WEB_DOI *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_WEB_DOI(struct soap*, const char*, int, const struct WEB_DOI *, const char*);
SOAP_FMAC3 struct WEB_DOI * SOAP_FMAC4 soap_in_WEB_DOI(struct soap*, const char*, struct WEB_DOI *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_WEB_DOI(struct soap*, const struct WEB_DOI *, const char*, const char*);

#ifndef soap_write_WEB_DOI
#define soap_write_WEB_DOI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_WEB_DOI(soap, data),0) || soap_put_WEB_DOI(soap, data, "WEB-DOI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct WEB_DOI * SOAP_FMAC4 soap_get_WEB_DOI(struct soap*, struct WEB_DOI *, const char*, const char*);

#ifndef soap_read_WEB_DOI
#define soap_read_WEB_DOI(soap, data) ( soap_begin_recv(soap) || !soap_get_WEB_DOI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct WEB_DOI * SOAP_FMAC2 soap_instantiate_WEB_DOI(struct soap*, int, const char*, const char*, size_t*);

inline struct WEB_DOI * soap_new_WEB_DOI(struct soap *soap, int n = -1) { return soap_instantiate_WEB_DOI(soap, n, NULL, NULL, NULL); }

inline struct WEB_DOI * soap_new_req_WEB_DOI(struct soap *soap, unsigned short nStatID, unsigned short nDevID, unsigned int dCode) { struct WEB_DOI *_p = soap_instantiate_WEB_DOI(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WEB_DOI(soap, _p); _p->nStatID = nStatID; _p->nDevID = nDevID; _p->dCode = dCode; } return _p; }

inline struct WEB_DOI * soap_new_set_WEB_DOI(struct soap *soap, unsigned short nStatID, unsigned short nDevID, unsigned int dCode) { struct WEB_DOI *_p = soap_instantiate_WEB_DOI(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WEB_DOI(soap, _p); _p->nStatID = nStatID; _p->nDevID = nDevID; _p->dCode = dCode; } return _p; }

inline void soap_delete_WEB_DOI(struct soap *soap, struct WEB_DOI *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_WEB_DOI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTomatrix
#define SOAP_TYPE_PointerTomatrix (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomatrix(struct soap*, matrix *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomatrix(struct soap*, const char *, int, matrix *const*, const char *);
SOAP_FMAC3 matrix ** SOAP_FMAC4 soap_in_PointerTomatrix(struct soap*, const char*, matrix **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomatrix(struct soap*, matrix *const*, const char*, const char*);

#ifndef soap_write_PointerTomatrix
#define soap_write_PointerTomatrix(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTomatrix(soap, data),0) || soap_put_PointerTomatrix(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 matrix ** SOAP_FMAC4 soap_get_PointerTomatrix(struct soap*, matrix **, const char*, const char*);

#ifndef soap_read_PointerTomatrix
#define soap_read_PointerTomatrix(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTomatrix(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data),0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToARR_WEB_DOIVAL
#define SOAP_TYPE_PointerToARR_WEB_DOIVAL (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToARR_WEB_DOIVAL(struct soap*, ARR_WEB_DOIVAL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToARR_WEB_DOIVAL(struct soap*, const char *, int, ARR_WEB_DOIVAL *const*, const char *);
SOAP_FMAC3 ARR_WEB_DOIVAL ** SOAP_FMAC4 soap_in_PointerToARR_WEB_DOIVAL(struct soap*, const char*, ARR_WEB_DOIVAL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToARR_WEB_DOIVAL(struct soap*, ARR_WEB_DOIVAL *const*, const char*, const char*);

#ifndef soap_write_PointerToARR_WEB_DOIVAL
#define soap_write_PointerToARR_WEB_DOIVAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToARR_WEB_DOIVAL(soap, data),0) || soap_put_PointerToARR_WEB_DOIVAL(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ARR_WEB_DOIVAL ** SOAP_FMAC4 soap_get_PointerToARR_WEB_DOIVAL(struct soap*, ARR_WEB_DOIVAL **, const char*, const char*);

#ifndef soap_read_PointerToARR_WEB_DOIVAL
#define soap_read_PointerToARR_WEB_DOIVAL(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToARR_WEB_DOIVAL(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToARR_WEB_DOI
#define SOAP_TYPE_PointerToARR_WEB_DOI (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToARR_WEB_DOI(struct soap*, ARR_WEB_DOI *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToARR_WEB_DOI(struct soap*, const char *, int, ARR_WEB_DOI *const*, const char *);
SOAP_FMAC3 ARR_WEB_DOI ** SOAP_FMAC4 soap_in_PointerToARR_WEB_DOI(struct soap*, const char*, ARR_WEB_DOI **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToARR_WEB_DOI(struct soap*, ARR_WEB_DOI *const*, const char*, const char*);

#ifndef soap_write_PointerToARR_WEB_DOI
#define soap_write_PointerToARR_WEB_DOI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToARR_WEB_DOI(soap, data),0) || soap_put_PointerToARR_WEB_DOI(soap, data, "ARR-WEB-DOI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ARR_WEB_DOI ** SOAP_FMAC4 soap_get_PointerToARR_WEB_DOI(struct soap*, ARR_WEB_DOI **, const char*, const char*);

#ifndef soap_read_PointerToARR_WEB_DOI
#define soap_read_PointerToARR_WEB_DOI(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToARR_WEB_DOI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTovector
#define SOAP_TYPE_PointerTovector (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTovector(struct soap*, vector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTovector(struct soap*, const char *, int, vector *const*, const char *);
SOAP_FMAC3 vector ** SOAP_FMAC4 soap_in_PointerTovector(struct soap*, const char*, vector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTovector(struct soap*, vector *const*, const char*, const char*);

#ifndef soap_write_PointerTovector
#define soap_write_PointerTovector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTovector(soap, data),0) || soap_put_PointerTovector(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 vector ** SOAP_FMAC4 soap_get_PointerTovector(struct soap*, vector **, const char*, const char*);

#ifndef soap_read_PointerTovector
#define soap_read_PointerTovector(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTovector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__int
#define SOAP_TYPE_PointerToxsd__int (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__int(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__int(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToxsd__int(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__int(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__int
#define soap_write_PointerToxsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__int(soap, data),0) || soap_put_PointerToxsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToxsd__int(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToxsd__int
#define soap_read_PointerToxsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToWEB_DOIVAL
#define SOAP_TYPE_PointerToWEB_DOIVAL (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToWEB_DOIVAL(struct soap*, struct WEB_DOIVAL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToWEB_DOIVAL(struct soap*, const char *, int, struct WEB_DOIVAL *const*, const char *);
SOAP_FMAC3 struct WEB_DOIVAL ** SOAP_FMAC4 soap_in_PointerToWEB_DOIVAL(struct soap*, const char*, struct WEB_DOIVAL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToWEB_DOIVAL(struct soap*, struct WEB_DOIVAL *const*, const char*, const char*);

#ifndef soap_write_PointerToWEB_DOIVAL
#define soap_write_PointerToWEB_DOIVAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToWEB_DOIVAL(soap, data),0) || soap_put_PointerToWEB_DOIVAL(soap, data, "WEB-DOIVAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct WEB_DOIVAL ** SOAP_FMAC4 soap_get_PointerToWEB_DOIVAL(struct soap*, struct WEB_DOIVAL **, const char*, const char*);

#ifndef soap_read_PointerToWEB_DOIVAL
#define soap_read_PointerToWEB_DOIVAL(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToWEB_DOIVAL(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToWEB_DOI
#define SOAP_TYPE_PointerToWEB_DOI (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToWEB_DOI(struct soap*, struct WEB_DOI *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToWEB_DOI(struct soap*, const char *, int, struct WEB_DOI *const*, const char *);
SOAP_FMAC3 struct WEB_DOI ** SOAP_FMAC4 soap_in_PointerToWEB_DOI(struct soap*, const char*, struct WEB_DOI **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToWEB_DOI(struct soap*, struct WEB_DOI *const*, const char*, const char*);

#ifndef soap_write_PointerToWEB_DOI
#define soap_write_PointerToWEB_DOI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToWEB_DOI(soap, data),0) || soap_put_PointerToWEB_DOI(soap, data, "WEB-DOI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct WEB_DOI ** SOAP_FMAC4 soap_get_PointerToWEB_DOI(struct soap*, struct WEB_DOI **, const char*, const char*);

#ifndef soap_read_PointerToWEB_DOI
#define soap_read_PointerToWEB_DOI(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToWEB_DOI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
